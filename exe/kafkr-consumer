#!/usr/bin/env ruby

require 'kafkr'
require 'find'
require 'digest'

PORT = ENV['KAFKR_PORT'] || 4000
$current_consumer = nil
$restart_required = false
$handlers_loaded = false

Signal.trap('USR1') do
  $restart_required = true
end

def stop_consumer
  $current_consumer = nil if $current_consumer
end

def list_registered_handlers
  Kafkr::Consumer.handlers.each do |handler|
    handler_name = handler.class.name.split('::').last
    handler_name.gsub!(/Handler$/, '')
    puts "#{handler_name} loaded - ok!"
  end
end

def start_consumer
  puts "Starting consumer on port #{PORT}!"
  Kafkr::Consumer.configure { |config| config.port = PORT }

  unless $handlers_loaded
    Kafkr::Consumer.load_handlers
    $handlers_loaded = true
  end
  list_registered_handlers

  $current_consumer = Kafkr::Consumer.new
  $current_consumer.listen { |message| }
end

def reload_handlers(file_checksums)
  Find.find(Kafkr::Consumer::HANDLERS_DIRECTORY) do |path|
    next unless File.file?(path)
    load path
  end
  Kafkr::Consumer.load_handlers
  list_registered_handlers
end

def monitor_handlers(file_checksums)
  loop do
    changed = false
    Find.find(Kafkr::Consumer::HANDLERS_DIRECTORY) do |path|
      next unless File.file?(path)

      current_checksum = Digest::MD5.file(path).hexdigest
      if file_checksums[path] != current_checksum
        file_checksums[path] = current_checksum
        changed = true
      end
    end

    reload_handlers(file_checksums) if changed
    sleep 5
  end
end

file_checksums = {}
monitoring_thread = Thread.new { monitor_handlers(file_checksums) }
start_consumer

begin
  loop do
    if $restart_required
      stop_consumer
      start_consumer
      $restart_required = false
    end
    sleep 1
  end
rescue LoadError => e
  exit(1)
rescue => e
  exit(1)
rescue Interrupt
  stop_consumer
  exit(0)
ensure
  monitoring_thread.kill if monitoring_thread
end
