#!/usr/bin/env ruby

require "kafkr"
require "find"
require "digest"

# Accepting command line arguments for host and port
host = ARGV[0] || "localhost"
port = ARGV[1] || ENV["KAFKR_PORT"] || 4000

puts "Running on host: #{host} and port: #{port}"

$current_consumer = nil
$restart_required = false
$handlers_loaded = false
$handlers_changed = false
$loaded_handlers = {}

Signal.trap("USR1") do
  $restart_required = true
end

def stop_consumer
  $current_consumer = nil if $current_consumer
end

def list_registered_handlers
  puts "Registered Handlers:"
  Kafkr::Consumer.handlers.each do |handler|
    $loaded_handlers = {}
    handler_name = handler.class.name.split("::").last.gsub(/Handler$/, "")
    puts "#{handler_name} handler registered."
  end
end

def start_consumer(port)
  puts "Starting consumer on port #{port}!"
  $handlers_changed = false

  Kafkr::Consumer.configure do |config|
    config.port = port
  end

  unless $handlers_loaded
    Kafkr::Consumer.load_handlers if $handlers_changed == false
    list_registered_handlers
    $handlers_loaded = true
  end

  $current_consumer = Kafkr::Consumer.new
  $current_consumer.listen do |message|
    # Processing of the message
  end
end

# ... rest of the script remains unchanged ...

file_checksums = {}
monitoring_thread = Thread.new { monitor_handlers(file_checksums) }
start_consumer(port)  # Pass the port here

begin
  loop do
    if $restart_required
      stop_consumer
      start_consumer(port)
      $restart_required = false
    end
    sleep 1
  end
rescue LoadError => e
  exit(1)
rescue => e
  exit(1)
rescue Interrupt
  stop_consumer
  exit(0)
ensure
  monitoring_thread.kill if monitoring_thread
end
